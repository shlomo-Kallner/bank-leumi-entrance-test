---

    -   hosts: all
        remote_user: user
        # become: yes
        become: true
        tasks:
            - name: testing my connections
              ansible.builtin.ping:

            - name: Run the equivalent of "apt-get update" as a separate step
              ansible.builtin.apt:
                # update_cache: yes
                update_cache: true

            - name: install GNUPG, cURL, ca-certificates and lsb-release
              ansible.builtin.apt:
                name: 
                  - gnupg 
                  - curl 
                  - gnupg2 
                  - ca-certificates 
                  - lsb-release
                  - apt-transport-https
                  - build-essential 
                  - rsync 
                  - apt-utils  
                  - software-properties-common 
                  - jq 
                  - unzip
                  - git
                  - python3 
                  - python3-pip 
                  - python3-venv 
                  - python3-wheel
                  - python3-setuptools
                  - python3-pkg-resources
                  - python3-distutils
                  - python3-git
                  - python3-apt
                  - iptables 
                  - ufw
                  - libseccomp2
                  - vim
                  - strace
                  - ipvsadm
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                autoclean: true
                # autoremove: yes
                autoremove: true

            - name: Add the docker signing key to apt
              ansible.builtin.apt_key:
                url: https://download.docker.com/linux/debian/gpg
                keyring: /etc/apt/trusted.gpg.d/docker.gpg
                state: present

            - name: Add the docker apt repo
              ansible.builtin.apt_repository:
                repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/debian bullseye stable"
                state: present
                # update_cache: yes
                update_cache: true

            - name: Install the docker cli
              ansible.builtin.apt:
                name:
                  - docker-ce-cli
                  - docker-ce
                  - containerd.io
                  # - docker-compose-plugin
                  # - docker-buildx-plugin 
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                # autoremove: yes

            - name: Ensure group "docker" exists
              ansible.builtin.group:
                name: docker
                state: present

            - name: Add the user 'user' with a bash shell, appending the group 'docker' to the user's groups
              ansible.builtin.user:
                name: user
                shell: /bin/bash
                home: /home/user
                move_home: true
                groups: 
                  - docker
                append: yes
                state: present

            # - name: Create the bash_aliases file if it does not exist
            #   become: true
            #   ansible.builtin.file:
            #     path: /home/user/.bash_aliases
            #     state: touch
            #     owner: user
            #     group: docker
            #     mode: u+rwx,g-wx,o-rwx

            - name: Create the app config directory if it does not exist
              ansible.builtin.file:
                path: /home/user/app
                state: directory
                owner: user
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            # - name: Remove the go files if it already exists
            #   become: true
            #   ansible.builtin.file:
            #     path: /usr/local/go/
            #     state: absent

            # - name: Unarchive the go binaries - a file that needs to be downloaded
            #   ansible.builtin.unarchive:
            #     src: https://go.dev/dl/go1.20.2.linux-amd64.tar.gz
            #     dest: /usr/local
            #     remote_src: yes
            #     creates: /usr/local/go/
            #     owner: user
            #     group: docker
            #     mode: u+rwx,g+rwx,o-rwx
            #   register: go_bin
                
            # - name: Print the go bin unarchiving
            #   ansible.builtin.debug:
            #     var: go_bin

            # - name: add go to the bash_aliases
            #   ansible.builtin.shell: echo 'export PATH=$PATH:/usr/local/go/bin' > /home/user/.bash_aliases
            #   args:
            #     executable: /bin/bash

            # - name: reload bashrc
            #   ansible.builtin.shell: source /home/user/.profile
            #   args:
            #     executable: /bin/bash

            # - name: chech go installation
            #   ansible.builtin.shell: /usr/local/go/bin/go version
            #   args:
            #     executable: /bin/bash
            #   register: go_ver_res
            #   # failed_when: "go_ver_res.stderr.find('go: command not found') != -1"
            #   failed_when: "go_ver_res.stderr.find('not found') != -1"
                
            # - name: Print the go version
            #   ansible.builtin.debug:
            #     var: go_ver_res

            # # - name: download cnitool
            # #   ansible.builtin.shell: /usr/local/go/bin/go get github.com/containernetworking/cni
            # #   args:
            # #     executable: /bin/bash

            # - name: Remove the cni go files if they already exists
            #   become: true
            #   ansible.builtin.file:
            #     path: /home/user/app/cni
            #     state: absent

            # - name: clone cnitool
            #   ansible.builtin.shell: cd /home/user/app && git clone https://github.com/containernetworking/cni.git
            #   args:
            #     executable: /bin/bash

            # # - name: download cnitool
            # #   ansible.builtin.shell: cd /home/user/app/cni && /usr/local/go/bin/go get github.com/containernetworking/cni
            # #   args:
            # #     executable: /bin/bash

            # - name: install cnitool
            #   ansible.builtin.shell: cd /home/user/app/cni && /usr/local/go/bin/go install github.com/containernetworking/cni/cnitool
            #   args:
            #     executable: /bin/bash

            - name: Set the native CGroupDriver - Copy using inline content
              ansible.builtin.copy:
                content: '{"exec-opts": ["native.cgroupdriver=systemd"]}'
                dest: /etc/docker/daemon.json

            - name: Enable service docker and restart it
              ansible.builtin.service:
                name: docker
                # enabled: yes
                enabled: true
                state: restarted

            - name: Create the CNI plugins directory if it does not exist
              ansible.builtin.file:
                path: /opt/cni/bin
                state: directory
                owner: root
                group: root
                mode: u=rwx,g=rx,o=x

            # - name: Unarchive the CNI plugins - a file that needs to be downloaded
            #   ansible.builtin.unarchive:
            #     src: https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
            #     dest: /opt/cni/bin
            #     remote_src: yes
            
            - name: Execute the command in remote shell; stdout goes to the specified file on the remote
              ansible.builtin.shell: sudo containerd config default > /etc/containerd/config.toml
              args:
                executable: /bin/bash

            - name: Replace a set of entryies int he containerd config
              ansible.builtin.lineinfile:
                path: /etc/containerd/config.toml
                regexp: '{{ item.regex }}'
                line: '{{ item.line }}'
                owner: root
                group: root
                mode: 'u=rw,g=r,o=r'
              loop: 
                - regex: '(\s*)SystemdCgroup = false(\s*)'
                  line: '\1SystemdCgroup = true\2'
                - regex: '(\s*)systemd_cgroup = false(\s*)'
                  line: '\1systemd_cgroup = true\2'

            - name: Enable service containerd and restart it
              ansible.builtin.service:
                name: containerd
                # enabled: yes
                enabled: true
                state: restarted

            - name: Add the kubernetes signing key to apt
              ansible.builtin.apt_key:
                url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
                keyring: /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg
                state: present

            - name: Add the kubernetes apt repo
              ansible.builtin.apt_repository:
                repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
                state: present
                # update_cache: yes
                update_cache: true

            - name: Install kubernetes
              ansible.builtin.apt:
                name:
                  - kubectl
                  - kubelet
                  - kubeadm
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                # autoremove: yes

            - name: Add Extra Containerd Args for Kubelet - Copy using inline content
              ansible.builtin.copy:
                content: |
                  [Service]                                                 
                  Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
                dest: /etc/systemd/system/kubelet.service.d/0-containerd.conf

            - name: setup ip forwarding - Copy using inline content
              ansible.builtin.copy:
                content: |
                  net.bridge.bridge-nf-call-iptables = 1
                  net.bridge.bridge-nf-call-ip6tables = 1
                  net.ipv4.ip_forward = 1
                dest: /etc/sysctl.d/k8s.conf

            # - name: setup ip forwarding with sysctl then apply the param without reboot
            #   ansible.builtin.shell: 'sudo sysctl {{ item }}'
            #   args:
            #     executable: /bin/bash
            #   loop:
            #     - 'net.bridge.bridge-nf-call-iptables=1'
            #     - 'net.bridge.bridge-nf-call-ip6tables=1'
            #     - 'net.ipv4.ip_forward=1'
            #     - '--system'
            
            - name: Set ip forwarding on in /proc and in the sysctl file and reload if necessary
              ansible.posix.sysctl:
                name: '{{ item.name }}'
                value: '1'
                sysctl_set: true
                state: present
                reload: '{{ item.reload }}'
              loop:
                - name: 'net.bridge.bridge-nf-call-iptables'
                  reload: false
                - name: 'net.bridge.bridge-nf-call-ip6tables'
                  reload: false
                - name: 'net.ipv4.ip_forward'
                  reload: true

            - name: apply the sysctl params without reboot
              ansible.builtin.shell: 'sudo sysctl --system'
              args:
                executable: /bin/bash


            - name: setup netfilter - Copy using inline content
              ansible.builtin.copy:
                content: |
                  overlay
                  br_netfilter
                dest: /etc/modules-load.d/k8s.conf

            - name: setup netfilter with modprobe
              community.general.modprobe:
                name: '{{ item }}'
                state: present
              loop:
                - overlay
                - br_netfilter
              # ansible.builtin.shell: sudo modprobe br_netfilter
              # args:
              #   executable: /bin/bash
            

            - name: Create the kube config directory if it does not exist
              ansible.builtin.file:
                path: /home/user/.kube
                state: directory
                owner: user
                group: docker
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            - name: Disable the swap file
              ansible.builtin.shell: sudo swapoff -a
              args:
                executable: /bin/bash

            - name: Replace a set of entryies int he containerd config
              ansible.builtin.lineinfile:
                path: /etc/fstab
                regexp: '^([^#]+\s+swap\s+.+\s)$'
                line: '# \1'
                owner: root
                group: root
                mode: 'u=rw,g=r,o=r'

            - name: Just force systemd to reread configs (2.4 and above)
              ansible.builtin.systemd:
                daemon_reload: true

            - name: add error catching for a block of plays
              block:

                # - name: check if the Cluster is Initialized
                #   ansible.builtin.shell: kubectl get nodes -A -o=json | jq -r '.items | length'
                #   args:
                #     executable: /bin/bash
                #   register: num_items
                #   ignore_errors: true
                
                # - name: Print the number of items in the Cluster
                #   ansible.builtin.debug:
                #     var: num_items

                - name: Pull ahead of time the Cluster images
                  ansible.builtin.command: kubeadm config images pull
                  register: pull_out
                
                - name: Print the images pull output
                  ansible.builtin.debug:
                    var: pull_out

                # free-form (string) arguments, some arguments on separate lines with the 'args' keyword
                # 'args' is a task keyword, passed at the same level as the module
                - name: Initialize the Cluster
                  ansible.builtin.command:  kubeadm init --pod-network-cidr={{ network_cidr | default('10.10.0.0/16') | quote }} --cri-socket "unix:///run/containerd/containerd.sock" --apiserver-advertise-address={{ apiserver_address | default('0.0.0.0') | quote }} --control-plane-endpoint={{ ctlplane_endpoint | default('0.0.0.0') | quote }}
                  register: admin_output
                  # ignore_errors: true
                  # when: num_items | int > 0
                  # args:
                  #   creates: /path/to/database
                
                - name: Print the output of the Initialization
                  ansible.builtin.debug:
                    var: admin_output
                  failed_when: admin_output is failed

                - name: Sleep for 300 seconds and continue with play
                  ansible.builtin.wait_for:
                    timeout: 300
                      
              rescue:
            
                - name: Print the failed task
                  ansible.builtin.debug:
                    var: ansible_failed_task
            
                - name: Print the failed task result
                  ansible.builtin.debug:
                    var: ansible_failed_result

                - name: get the kubelet's status
                  become: true 
                  # ansible.builtin.shell: echo $(sudo systemctl status kubelet)
                  ansible.builtin.shell: sudo systemctl status kubelet
                  args:
                    executable: /bin/bash
                  register: kubelet_status
            
                - name: Print the kubelet's status
                  ansible.builtin.debug:
                    var: kubelet_status

                - name: get all containers' status
                  become: true 
                  ansible.builtin.shell: sudo crictl --runtime-endpoint unix:///run/containerd/containerd.sock ps -a
                  args:
                    executable: /bin/bash
                  register: containers_status
            
                - name: Print the containers' status
                  ansible.builtin.debug:
                    var: containers_status

                - name: reset the cluster
                  become: true
                  ansible.builtin.command: kubeadm reset -f

                - name: Remove the kube config file if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /home/user/.kube/config
                    state: absent

                - name: Remove the cni files if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /etc/cni/net.d/
                    state: absent
                
                - name: fail this run
                  ansible.builtin.command: /bin/false
                  ignore_errors: false


    -   hosts: all
        remote_user: user
        become: false
        tasks:
            - name: testing my connections
              ansible.builtin.ping:

            - name: Create the kube config directory if it does not exist
              ansible.builtin.file:
                path: /home/user/.kube
                state: directory
                owner: user
                group: docker
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            - name: Remove the kube config file if it already exists
              become: true
              ansible.builtin.file:
                path: /home/user/.kube/config
                state: absent

            - name: copy the admin config
              ansible.builtin.shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
              args:
                executable: /bin/bash
                # creates: /home/user/.kube/config

            - name: Create the kube config file if it does not exist
              become: true
              ansible.builtin.file:
                path: /home/user/.kube/config
                state: file
                owner: user
                group: docker
                mode: u+rw,g-wx,o-rwx

            - name: tricky commands
              block:

                # - name: Create the app config directory if it does not exist
                #   ansible.builtin.file:
                #     path: /home/user/app
                #     state: directory
                #     owner: user
                #     # mode: '0755'
                #     mode: u+rw,g-wx,o-rwx

                - name: Template the Calico networking resources
                  ansible.builtin.template:
                    src: templates/calico-resources.yaml.j2
                    dest: /home/user/app/calico-resources.yaml

                - name: start the networking addon
                  ansible.builtin.command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml

                - name: Create the Calico networking resources
                  ansible.builtin.command: kubectl create -f /home/user/app/calico-resources.yaml

                - name: Wait for the Calico networking resources to complete ..
                  # ansible.builtin.command: sleep 240
                  ansible.builtin.wait_for:
                    timeout: 300

                - name: Retry a task until a certain condition is met
                  ansible.builtin.shell: kubectl get pods -n calico-system -o=json | jq -r '( .items | length) == ([ [ [.items[] | .status.phase] | .[] == "Running" ] | select( .[] == true ) ] | length)'
                  args:
                    executable: /bin/bash
                  register: result
                  until: result.stdout.find("true") != -1
                  retries: 50
                  delay: 10
            
                - name: Print the result
                  ansible.builtin.debug:
                    var: result

                # - name: Create the Calico networking resources
                #   ansible.builtin.command: kubectl create -f /home/user/app/calico-resources.yaml

                - name: Enable workloads on the control plane
                  ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

                - name: Enable workloads on the control plane - part 2
                  ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/master-

                - name: Create a TLS Certificate
                  ansible.builtin.shell: openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout /home/user/app/tls.key -out /home/user/app/tls.crt -subj "/CN={{ dns_host_name | default('nginxsvc') }}/O={{ dns_host_name | default('nginxsvc') }}"
                  args:
                    executable: /bin/bash
                    # creates:
                    #   - /home/user/app/tls.key
                    #   - /home/user/app/tls.crt

                - name: Create the TLS Secret
                  ansible.builtin.command: kubectl create secret tls calc-app-tls-secret --key /home/user/app/tls.key --cert /home/user/app/tls.crt

                - name: Create the Nginx Ingress Controller
                  ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.6.4/deploy/static/provider/baremetal/deploy.yaml

                - name: Copy file with owner and permission, using symbolic representation
                  ansible.builtin.copy:
                    src: files/calc-app.k8s.yaml
                    dest: /home/user/app/calc-app.k8s.yaml
                    owner: user
                    group: docker
                    mode: u=rw,g=r,o=r

                - name: Create our App!!
                  ansible.builtin.command: kubectl apply -f /home/user/app/calc-app.k8s.yaml

                - name: Retry a task until a certain condition is met
                  ansible.builtin.shell: kubectl get pods -l app=calc-app -o=json | jq -r '( .items | length) == ([ [ [.items[] | .status.phase] | .[] == "Running" ] | select( .[] == true ) ] | length)'
                  args:
                    executable: /bin/bash
                  register: result
                  until: result.stdout.find("true") != -1
                  retries: 50
                  delay: 10

                - name: Allow all access to tcp port 443
                  community.general.ufw:
                    rule: allow
                    port: '443'
                    proto: tcp
                    state: enabled

                # - name: Allow all access from RFC1918 networks to this host
                #   community.general.ufw:
                #     rule: allow
                #     src: '{{ item }}'
                #   loop:
                #     - 10.0.0.0/8
                #     - 172.16.0.0/12
                #     - 192.168.0.0/16
              
              rescue:
            
                - name: Print the failed task
                  ansible.builtin.debug:
                    var: ansible_failed_task
            
                - name: Print the failed task result
                  ansible.builtin.debug:
                    var: ansible_failed_result

                - name: get the kubelet's status
                  become: true 
                  ansible.builtin.shell: sudo systemctl status kubelet
                  args:
                    executable: /bin/bash
                  register: kubelet_status
            
                - name: Print the kubelet's status
                  ansible.builtin.debug:
                    var: kubelet_status

                - name: get all containers' status
                  become: true 
                  ansible.builtin.shell: sudo crictl --runtime-endpoint unix:///run/containerd/containerd.sock ps -a
                  args:
                    executable: /bin/bash
                  register: containers_status
            
                - name: Print the containers' status
                  ansible.builtin.debug:
                    var: containers_status

                - name: reset the cluster
                  become: true
                  ansible.builtin.command: kubeadm reset -f

                - name: Remove the kube config file if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /home/user/.kube/config
                    state: absent

                - name: Remove the cni files if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /etc/cni/net.d/
                    state: absent
                
                - name: fail this run
                  ansible.builtin.command: /bin/false
                  ignore_errors: false

            

            
