---

    -   hosts: all
        remote_user: user
        # become: yes
        become: true
        tasks:
            - name: testing my connections
              ping:

            - name: Run the equivalent of "apt-get update" as a separate step
              apt:
                # update_cache: yes
                update_cache: true

            - name: install GNUPG, cURL, ca-certificates and lsb-release
              apt:
                name: 
                  - gnupg 
                  - curl 
                  - gnupg2 
                  - ca-certificates 
                  - lsb-release
                  - apt-transport-https
                  - build-essential 
                  - rsync 
                  - apt-utils  
                  - software-properties-common 
                  - jq 
                  - unzip
                  - git
                  - python3 
                  - python3-pip 
                  - python3-venv 
                  - python3-wheel
                  - python3-setuptools
                  - python3-pkg-resources
                  - python3-distutils
                  - python3-git
                  - python3-apt
                  - iptables 
                  - ufw
                  - libseccomp2
                  - vim
                  - strace
                  - ipvsadm
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                autoclean: true
                # autoremove: yes
                autoremove: true

            - name: Add the docker signing key to apt
              apt_key:
                url: https://download.docker.com/linux/debian/gpg
                keyring: /etc/apt/trusted.gpg.d/docker.gpg
                state: present

            - name: Add the docker apt repo
              apt_repository:
                repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/debian bullseye stable"
                state: present
                # update_cache: yes
                update_cache: true

            - name: Install the docker cli
              apt:
                name:
                  - docker-ce-cli
                  - docker-ce
                  - containerd.io
                  - docker-compose-plugin
                  # - docker-buildx-plugin 
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                # autoremove: yes

            - name: Ensure group "docker" exists
              group:
                name: docker
                state: present

            - name: Add the user 'user' with a bash shell, appending the group 'docker' to the user's groups
              user:
                name: user
                shell: /bin/bash
                home: /home/user
                move_home: true
                groups: 
                  - docker
                append: yes
                state: present

            - name: Set the native CGroupDriver - Copy using inline content
              ansible.builtin.copy:
                content: '{"exec-opts": ["native.cgroupdriver=systemd"]}'
                dest: /etc/docker/daemon.json

            - name: Enable service docker and restart it
              ansible.builtin.service:
                name: docker
                # enabled: yes
                enabled: true
                state: restarted

            - name: Create the CNI plugins directory if it does not exist
              ansible.builtin.file:
                path: /opt/cni/bin
                state: directory
                owner: user
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            - name: Unarchive the CNI plugins - a file that needs to be downloaded
              ansible.builtin.unarchive:
                src: https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
                dest: /opt/cni/bin
                remote_src: yes
            
            - name: Execute the command in remote shell; stdout goes to the specified file on the remote
              ansible.builtin.shell: containerd config default > /etc/containerd/config.toml

            - name: Enable service containerd and restart it
              ansible.builtin.service:
                name: containerd
                # enabled: yes
                enabled: true
                state: restarted

            - name: Add the kubernetes signing key to apt
              apt_key:
                url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
                keyring: /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg
                state: present

            - name: Add the kubernetes apt repo
              apt_repository:
                repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
                state: present
                # update_cache: yes
                update_cache: true

            - name: Install kubernetes
              apt:
                name:
                  - kubectl
                  - kubelet
                  - kubeadm
                state: present
                # update_cache: yes
                update_cache: true
                # autoclean: yes
                # autoremove: yes

            - name: Add Extra Containerd Args for Kubelet - Copy using inline content
              ansible.builtin.copy:
                content: |
                  [Service]                                                 
                  Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
                dest: /etc/systemd/system/kubelet.service.d/0-containerd.conf

            - name: Create the kube config directory if it does not exist
              ansible.builtin.file:
                path: /home/user/.kube
                state: directory
                owner: user
                group: docker
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            - name: Just force systemd to reread configs (2.4 and above)
              ansible.builtin.systemd:
                daemon_reload: true

            - name: add error catching for a block of plays
              block:

                - name: check if the Cluster is Initialized
                  ansible.builtin.shell: kubectl get nodes -A -o=json | jq -r '.items | length'
                  register: num_items
                  ignore_errors: true
                
                - name: Print the number of items in the Cluster
                  ansible.builtin.debug:
                    var: num_items

                - name: Pull ahead of time the Cluster images
                  ansible.builtin.command: kubeadm config images pull
                  register: pull_out
                
                - name: Print the images pull output
                  ansible.builtin.debug:
                    var: pull_out

                # free-form (string) arguments, some arguments on separate lines with the 'args' keyword
                # 'args' is a task keyword, passed at the same level as the module
                - name: Initialize the Cluster
                  ansible.builtin.command:  kubeadm init --pod-network-cidr={{ network_cidr | default('10.10.0.0/16') | quote }} --cri-socket "unix:///run/containerd/containerd.sock" --apiserver-advertise-address={{ apiserver_address | default('0.0.0.0') | quote }} --control-plane-endpoint={{ ctlplane_endpoint | default('0.0.0.0') | quote }}
                  register: admin_output
                  # ignore_errors: true
                  # when: num_items | int > 0
                  # args:
                  #   creates: /path/to/database
                
                - name: Print the output of the Initialization
                  ansible.builtin.debug:
                    var: admin_output
                  failed_when: admin_output is failed

                - name: Sleep for 300 seconds and continue with play
                  ansible.builtin.wait_for:
                    timeout: 300
                      
              rescue:
            
                - name: Print the failed task
                  ansible.builtin.debug:
                    var: ansible_failed_task
            
                - name: Print the failed task result
                  ansible.builtin.debug:
                    var: ansible_failed_result

                - name: reset the cluster
                  become: true
                  ansible.builtin.command: kubeadm reset -f

                - name: Remove the kube config file if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /home/user/.kube/config
                    state: absent

                - name: Remove the cni files if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /etc/cni/net.d/
                    state: absent
                
                - name: fail this run
                  ansible.builtin.command: /bin/false
                  ignore_errors: false


    -   hosts: all
        remote_user: user
        become: false
        tasks:
            - name: testing my connections
              ping:

            - name: Create the kube config directory if it does not exist
              ansible.builtin.file:
                path: /home/user/.kube
                state: directory
                owner: user
                group: docker
                # mode: '0755'
                mode: u+rw,g-wx,o-rwx

            - name: Remove the kube config file if it already exists
              become: true
              ansible.builtin.file:
                path: /home/user/.kube/config
                state: absent

            - name: copy the admin config
              ansible.builtin.shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
              args:
                creates: /home/user/.kube/config

            - name: Create the kube config file if it does not exist
              become: true
              ansible.builtin.file:
                path: /home/user/.kube/config
                state: file
                owner: user
                group: docker
                mode: u+rw,g-wx,o-rwx

            - name: tricky commands
              block:

                - name: start the networking addon
                  ansible.builtin.command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml

                - name: Create the app config directory if it does not exist
                  ansible.builtin.file:
                    path: /home/user/app
                    state: directory
                    owner: user
                    # mode: '0755'
                    mode: u+rw,g-wx,o-rwx

                - name: Template the Calico networking resources
                  ansible.builtin.template:
                    src: templates/calico-resources.yaml.j2
                    dest: /home/user/app/calico-resources.yaml

                - name: Create the Calico networking resources
                  ansible.builtin.command: kubectl create -f /home/user/app/calico-resources.yaml

                - name: Wait for the Calico networking resources to complete ..
                  # ansible.builtin.command: sleep 240
                  ansible.builtin.wait_for:
                    timeout: 300

                # - name: Create the Calico networking resources
                #   ansible.builtin.command: kubectl create -f /home/user/app/calico-resources.yaml

                - name: Enable workloads on the control plane
                  ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

                - name: Enable workloads on the control plane - part 2
                  ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/master-
              
              rescue:
            
                - name: Print the failed task
                  ansible.builtin.debug:
                    var: ansible_failed_task
            
                - name: Print the failed task result
                  ansible.builtin.debug:
                    var: ansible_failed_result

                - name: reset the cluster
                  become: true
                  ansible.builtin.command: kubeadm reset -f

                - name: Remove the kube config file if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /home/user/.kube/config
                    state: absent

                - name: Remove the cni files if it already exists
                  become: true
                  ansible.builtin.file:
                    path: /etc/cni/net.d/
                    state: absent
                
                - name: fail this run
                  ansible.builtin.command: /bin/false
                  ignore_errors: false

            

            
